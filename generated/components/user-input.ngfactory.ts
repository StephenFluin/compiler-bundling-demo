/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from './user-input';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
const styles_UserInput:any[] = [];
var renderType_UserInput:import0.RenderComponentType = null;
class _View_UserInput0 extends import1.AppView<import2.UserInput> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  constructor(viewUtils:import3.ViewUtils,parentInjector:import4.Injector,declarationEl:import5.AppElement) {
    super(_View_UserInput0,renderType_UserInput,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectionStrategy.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n	 ',null);
    this._el_1 = this.renderer.createElement(parentRenderNode,'input',null);
    this.renderer.setElementAttribute(this._el_1,'type','text');
    this._text_2 = this.renderer.createText(parentRenderNode,'\n	 ',null);
    var disposable_0:Function = this.renderer.listen(this._el_1,'keyup.enter',this.eventHandler(this._handle_keyup_enter_1_0.bind(this)));
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2
    ]
    ,[disposable_0],[]);
    return null;
  }
  private _handle_keyup_enter_1_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onSubmit(this._el_1)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_UserInput0(viewUtils:import3.ViewUtils,parentInjector:import4.Injector,declarationEl:import5.AppElement):import1.AppView<import2.UserInput> {
  if ((renderType_UserInput === null)) { (renderType_UserInput = viewUtils.createRenderComponentType('/Users/robwormald/Dev/demos/compiler-bundling-demo/src/components/user-input.ts class UserInput - inline template',0,import8.ViewEncapsulation.None,styles_UserInput)); }
  return new _View_UserInput0(viewUtils,parentInjector,declarationEl);
}
const styles_UserInput_Host:any[] = [];
var renderType_UserInput_Host:import0.RenderComponentType = null;
class _View_UserInput_Host0 extends import1.AppView<any> {
  _el_0:any;
  private _appEl_0:import5.AppElement;
  _UserInput_0_4:import2.UserInput;
  constructor(viewUtils:import3.ViewUtils,parentInjector:import4.Injector,declarationEl:import5.AppElement) {
    super(_View_UserInput_Host0,renderType_UserInput_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectionStrategy.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('user-input',rootSelector,null);
    this._appEl_0 = new import5.AppElement(0,null,this,this._el_0);
    var compView_0:any = viewFactory_UserInput0(this.viewUtils,this.injector(0),this._appEl_0);
    this._UserInput_0_4 = new import2.UserInput();
    this._appEl_0.initComponent(this._UserInput_0_4,[],compView_0);
    compView_0.create(this._UserInput_0_4,this.projectableNodes,null);
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import2.UserInput) && (0 === requestNodeIndex))) { return this._UserInput_0_4; }
    return notFoundResult;
  }
}
function viewFactory_UserInput_Host0(viewUtils:import3.ViewUtils,parentInjector:import4.Injector,declarationEl:import5.AppElement):import1.AppView<any> {
  if ((renderType_UserInput_Host === null)) { (renderType_UserInput_Host = viewUtils.createRenderComponentType('',0,null,styles_UserInput_Host)); }
  return new _View_UserInput_Host0(viewUtils,parentInjector,declarationEl);
}
export const UserInputNgFactory:import9.ComponentFactory<import2.UserInput> = new import9.ComponentFactory<import2.UserInput>('user-input',viewFactory_UserInput_Host0,import2.UserInput);